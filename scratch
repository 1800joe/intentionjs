intention === tin

data-class=""
tn-class=""
tn-class=""
tn-aware-class=""
tn-touch-mobile-class=""

class="standard" 
data-tablet-class="tablet" 
data-standard-class="standard"

resolution?
data-mobile-class=">1.5:mobile"



var ctx = {
	base:{
		class:'base classes'
	},
	mobile: {
		class:"=touch:one",
		src:"ok.png",
		title:"small ok"
	},
	tablet: {
		class:"three two",
		src="ok2.png",
		title:"medium ok"
	},
	touchMobile: {
		class=">1.5:highrez"
	}
}

data-tn="{ \
	base:{ \
		class:\"base classes\" \
	}, \
	mobile: { \
		class:\"=touch:one\", \
		src:\"ok.png\", \
		title:\"small ok\" \
	}, \
	tablet: { \
		class:\"three two\", \
		src=\"ok2.png\", \
		title:\"medium ok\" \
	}, \
	touchMobile: { \
		class=\">1.5:highrez\" \
	} \
}"

===

<div data-tin="{ \
	base:{ \
		class:\"base classes\" \
	}, \
	mobile: { \
		class:\"=touch:one\", \
	}, \
	tablet: { \
		class:\"three two\", \
	}, \
	mobileTouch: { \
		class=\">1.5:highrez\" \
	} \
}">


===


<div tn-class="base classes"
	 tn-mobile-class="=touch:one"
	 tn-tablet-class="three two"
	 tn-mobileTouch-class=">1.5:highrez">

TODO:
	"data-" is optional
	figure out what all this is going to be tested on
	test load perfomance of an image baked into html vs loaded via js
	add element organization around context (might not be worth it considering 
			most of the time all elements will be responsive in every context)

	testable functions:
		context:
			on
			off
			fire
			_thresholdIndex
			_hasChanged
			--_getInfo-- removed
			_getContext
			_isTouchDevice
			add
			value
			info

			how?
				_hitch
				_throttle




		intention:
			_listToPattern
			_makeInstructions
			_makeFilterPatterns
			_findBest
			_combine
			_divideAttrs
			_union
			_keys




	untestable functions
		context:
			_bindEvents
			_setInfo

		intention:
			_setStaticPatterns
			_setResponsiveElms
			_class
			_attr
			_move
			addFrom
			add
			remove

	listen for attribute changes : onpropertychange, DOMAttrModified, setInterval











RESPOND TO:::

// scroll Depth Checker
var scrollCheck = function(val){
	return function(retVal){
		if(retVal>val){
			return true;
		}
		return false;
	}
}

$(window).on('scroll', tn.respondTo([
	{
		name:'reallyShallow', 
		check:scrollCheck(0)
	},
	{
		name:'shallow', 
		check:scrollCheck(1000)
	},
	{
		name:'deep', 
		check:scrollCheck(7000)
}], callback))



<div tn-reallyShallow-class="super shallow"></div>



// scroll Depth Checker
var verticalCheck = function(val){
	return function(retVal){
		if(retVal>val){
			return true;
		}
		return false;
	}
}

$(window).on('resize', tn.respondTo([
	{
		name:'short', 
		check:verticalCheck(0)
	},
	{
		name:'medHeight', 
		check:verticalCheck(500)
	},
	{
		name:'tall', 
		check:verticalCheck(1000)
}], callback))

















